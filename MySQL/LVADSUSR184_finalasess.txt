QUES 1:
--Average sales amount for product category is calculated
-- date condition applied for last 30 days

SELECT AVG(s.sales_amount) AS avg_sales, p.product_category
FROM sales_records s
JOIN products p ON  s.product_id = p.product_id
WHERE sales_date >= EXTRACT(DAY FROM DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))
GROUP BY p.product_category;


Ques 2:

-- Top 3 products in terms of total sales
-- Current year (date condition specified)

SELECT p.product_name, SUM(s.sales_amount) FROM 
products p 
JOIN sales_records s ON p.product_id = s.product_id
WHERE year(sales_date) = YEAR(CURRENT_DATE())
GROUP BY p.product_name
ORDER BY SUM(s.sales_amount) desc
LIMIT 3;

Ques 3:

-- Contribution of customer(name) to total sales amount
-- CUME_DIST() gives contribution 

SELECT c.customer_name, SUM(s.sales_amount),
CUME_DIST() OVER (PARTITION BY c.customer_name ORDER BY SUM(s.sales_amount) DESC) as contribution
FROM customers c
JOIN sales_records s ON c.customer_id = s.customer_id
GROUP BY c.customer_name, s.sales_amount
ORDER BY contribution DESC;

-- to simply find out which customer segment seems to associate with total revenue more
SELECT c.customer_name, SUM(s.sales_amount)
FROM customers c
JOIN sales_records s ON c.customer_id = s.customer_id
group by c.customer_name
ORDER BY SUM(s.sales_amount) DESC
LIMIT 1;

Ques 4:

-- purchasing behaviour
-- case when for classification

SELECT c.customer_name, 
CASE WHEN customer_name IN
(SELECT customer_name FROM customers c
JOIN sales_records s ON c.cateogry_id = s.category_id
WHERE sales_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)) THEN "Consistent Buyers"
ELSE "Ocassional Buyers"
END AS purchasing_behaviour
FROM customers;

Ques 5:

-- Group concat for flight route
-- avera ticket price

SELECT AVG(t.ticket_price), f.departure_airport, f.arrival_airport AS fight_route, 
GROUP_CONCAT( f.departure_airport, "-", f.arrival_airport) as flight_route
FROM Flights f
JOIN tickets t ON f.flight_id = t.flight_id
GROUP BY f.departure_airport, f.arrival_airport;

Ques 6:

SELECT f.flight_number, f.departure_date, COUNT(ticket_id) as ticket_count
FROM Flights f
JOIN tickets t ON f.flight_id = t.flight_id
WHERE MONTH(ticket_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)
GROUP BY f.flight_number, f.departure_date
ORDER BY ticket_count DESC;

Ques 7:
SELECT p.passenger_name, p.frequent_flyer_status, SUM(t.ticket_price) AS total_amount_spent
FROM passengers p
JOIN tickets t ON p.passenger_id = t.passenger_id
GROUP BY p.passenger_name, p.frequent_flyer_status
ORDER BY SUM(t.ticket_price)
LIMIT 5;

Ques 8:
SELECT MONTH(t.ticket_date), count(p.passenger_id) AS ticket_count
FROM ticket t
JOIN passengers p ON t.passenger_id = p.passenger_id
GROUP BY Month(t.ticket_date)
order by ticket_count
LIMIT 1;

Ques 9:

SELECT game_genre, AVG(DATEDIFF(ps.play_date,p.registration_date)) AS play_time
FROM games g
join PLAYERSCORES ps
ON g.game_id = ps.game_id
JOIN players p ON ps.player_id = p.player_id
GROUP BY game_genre;

Ques 10:
SELECT g.game_name, COUNT(*) as num_player
FROM games g
JOIN playerscores ps ON g.game_id = ps.game_id
JOIN players p ON ps.player_id = p.player_id
GROUP BY g.game_name
ORDER by num_player DESC
LIMIT 3;

Ques 11:
SELECT g.game_name, MAX(ps.score) as highest_score, AVG(ps.score) as average_score, COUNT(ps.player_id) AS player_count
FROM games g
JOIN playerscores ps ON g.game_id = ps.game_id
JOIN players p ON ps.player_id = p.player_id
group by game_name;

Ques 12:

-- EXISTS used

SELECT p.player_name FROM players p WHERE NOT EXISTS (SELECT p.player_name FROM games g
JOIN playerscores ps ON g.game_id = ps.game_id
JOIN players p ON ps.player_id = p.player_id
WHERE DAY(ps.play_date) > DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY))
AND EXISTS (SELECT p.player_name FROM games g
JOIN playerscores ps ON g.game_id = ps.game_id
JOIN players p ON ps.player_id = p.player_id
WHERE DAY(ps.play_date) < DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY))

Ques 13:

-- docs with highest treatment cost top 5

SELECT d.doctor_name, SUM(t.cost) as total_cost
FROM doctors d
JOIN treatments t ON d.doctor_id = t.doctor_id
GROUP BY doctor_name
ORDER BY SUM(cost) DESC
Limit 5;

Ques 14:
SELECT treatment_name, SUM(cost) as revenue, ((SUM(cost)-cost)/(cost)*100) as percent
FROM treatments
GROUP BY treatment_name;

Ques 15:
SELECT patient_id, patient_name, admitted_date, discharge_date
FROM patients
WHERE DAY(DATEDIFF(admission_date, dicharge_date)) < 30

-- IF wE CONSIDER TREATMENT INTO ACOCUNT
SELECT p.patient_id, p.patient_name, p.admitted_date, p.discharge_date
FROM patients p 
JOIN treatments t 
ON p.patient_id = t.patient_date
WHERE DAY(DATEDIFF(admission_date, t.treatment_date)) < 30

Ques 16:
SELECT gender, diagnosis, AVG(DATEDIFF(discharge_date - admission_date) as avg_len_stay
FROM patients

Ques 17:
SELECT c.department, e.semester, avg(e.grade)
FROM courses c
JOIN enrollments e
ON c.course_id = e.course_id
GROUP BY c.department, e.semester
ORDER BY c.department, e.semester

Ques 18:
SELECT s.major, COUNT(e.student_id) as enroll_stud, enrollment_year
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
GROUP BY major, s.enrollment_year
ORDER BY COUNT(e.student_id)

Ques 19:
SELECT s.student_id, s.student_name, e.semester, SUM(c.credits) as credit_comp
FROM stduents s
JOIN enrollments e ON s.student_id = e.student_id
JOIN courses c ON e.course_id = c.course_id
GROUP BY s.student_id, s.student_name, e.semester
HAVING SUM(c.credits) >= 50;

Ques 20:
SELECT c.course_name, s.enrollment_year, COUNT(*) as num_st
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
JOIN courses c ON e.course_id = c.course_id
GROUP BY c.course_name, s.enrollment_year
ORDER BY COUNT(e.student_id) desc
LIMIT 5;










