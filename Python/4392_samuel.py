# -*- coding: utf-8 -*-
"""4392_Samuel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JJCKQWFxQVvf9SY7nfiPaRkojqpgFYqq
"""



#1

import numpy as np
sam = np.array([1,2,3,4,5])
minimum = np.min(sam)
maximum = np.max(sam)
mean_val = np.mean(sam)
standard_dev = np.std(sam)

print(minimum, maximum, mean_val, standard_dev)

#2

def normalise():
  mean_val = np.mean(health_data)
  standard_dev = np.std(health_data)
  normalization_method1 = ((health_data - mean_val)/(standard_dev))
  normalization_method2 = ((health_data + mean_val)/(standard_dev))
  print("First normalization is",normalization_method1)
  print("Second normalization is",normalization_method2)

health_data = np.array([[160, 70, 30],   # height, weight, age for individual 1
                        [165, 65, 35],   # height, weight, age for individual 2
                        [170, 75, 40]])

normalise()

#3
def score_avg():
  last_three = scoring[:,3:]
  avg_val = last_three.mean()
  return avg_val

scoring = np.array([[23,24,23,56],[25,46,34,34],[-1,23,45,32],[23,45,46,46]])
#last3 data here is free of -1
score_avg()

#4
def sensor_data():
  data = np.linspace(10,25,24)
  print("Temperature across the day is:",data)

sensor_data()

import pandas as pd

#5
def stock_analysis():
  df = pd.DataFrame(daily_closing_prices,columns=['Price'])
  moving_avg = df['Price'].rolling(window = 5).mean()
  return moving_avg

#given data copied
daily_closing_prices = np.array([100, 102, 98, 105, 107, 110, 108, 112, 115, 118, 120])
window_size = 5

stock_analysis()

#6
# mean_vector = [0,0]
cov = ([1,0.5],[0.5,2])
cov_mat = np.dot(cov,cov)

sample = 100
cov_mat * sample

#q7
properties_matrix = np.array([[1, 2, 3],
                              [4, 5, 6],
                              [7, 8, 9]])

inv = np.linalg.pinv(properties_matrix)

determinant = properties_matrix / inv

#8
sam = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]])
sizing = sam.shape
print(sizing)
filtering = sam>5
filtering

#9
def hr_analysis():
  df = pd.DataFrame(data)
  filter = df[(df['Age']<45) & (df['Department']!= "HR")]
  return filter

data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

hr_analysis()

#10
def sales_determination():
  df = pd.DataFrame(data)
  first_sum = df.groupby('Department')['Sales'].sum()
  count = df.groupby('Department')['Salesperson'].size()
  average = (first_sum / count)
  rank = average.sort_values(ascending=False)
  return rank


data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}

sales_determination()

#Q11

def supermarket_analysis():
  df = pd.DataFrame(data)
  categ = df[df['Category'] == 'Fruit']
  price_avg = categ['Price'].mean()
  conditions = categ[(categ['Price'] > price_avg) & (categ!=['Promotion'])]
  return conditions


data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

#Q12

def project_alloc():
  first_df = pd.DataFrame(employee_data)
  second_df = pd.DataFrame(project_data)
  merging = pd.merge(first_df, second_df, on='Employee', how='left')
  mapping = merging.groupby(['Department', 'Manager'])['Project']
  return mapping


employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}

# Dataset of employee project assignments
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}

project_alloc()

#Q13

df = pd.read_csv('/content/Q13_sports_team_stats.csv')
df

df['win_ratio'] = df['Wins']/df['GamesPlayed']
df

#Q14


df = pd.read_csv('/content/Q14_customer_purchases.csv')

#df['Date'] = pd.to_Datetime()
df['LoyaltyProgramSignup'] = pd.to_Datetime()
year = df['Date'].dt.year
year_after_signup = df['LoyaltyProgramSignup'].dt.time

After_signup = df.groupby('year_after_signup')['PurchaseAmount'].sum()
Before_signup = df.groupby('year')['PurchaseAmount'].sum()

#Q15

df = pd.read_csv('/content/Q15_student_grades.csv')


Subject_wise_grade_trend = df.groupby('Subject')['Grade'].sum()
Subject_wise_grade_trend



































































































