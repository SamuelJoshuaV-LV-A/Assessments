# -*- coding: utf-8 -*-
"""Que1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1904deBqRll_4oiEC03Mv_gVHVIFmIjkF
"""

import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt

import warnings
warnings.filterwarnings("ignore")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

df = pd.read_csv('/content/winequality-red.csv')
df

df.isnull().sum()

mean1 = df['fixed acidity'].mean()
mean2 = df['volatile acidity'].mean()
mean3 = df['citric acid'].mean()
mean4 = df['residual sugar'].mean()
mean5 = df['chlorides'].mean()
mean6 = df['free sulfur dioxide'].mean()
mean7 = df['sulphates'].mean()

df['fixed acidity']= df['fixed acidity'].fillna(mean1)
df['volatile acidity'] = df['volatile acidity'].fillna(mean2)
df['citric acid'] = df['citric acid'].fillna(mean3)
df['residual sugar'] = df['residual sugar'].fillna(mean4)
df['chlorides'] = df['chlorides'].fillna(mean5)
df['free sulfur dioxide'] = df['free sulfur dioxide'].fillna(mean6)
df['sulphates'] = df['sulphates'].fillna(mean7)

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

for i in df:
  sns.boxplot(df[i])
  plt.show()

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1-1.5*IQR
upper_bound = Q3+1.5*IQR
outlier = ((df<lower_bound) | (df>upper_bound)).any(axis=1)
df = df[~outlier]
df

#target will transformed to good or bad

df['quality'].replace({'3':'Bad','4':'Bad','5':'Bad','6':'Bad','7':'Good','8':'Good'})

encoding = LabelEncoder()
df['quality'] = encoding.fit_transform(df['quality'])

X = df.drop(columns='quality')
Y = df['quality']

from sklearn.preprocessing import StandardScaler
scaling = StandardScaler()
X = scaling.fit_transform(X)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators = 10, criterion='entropy')

Y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, Y_pred)
accuracy









































