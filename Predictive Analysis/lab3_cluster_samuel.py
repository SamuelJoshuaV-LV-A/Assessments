# -*- coding: utf-8 -*-
"""Lab3_cluster_samuel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SUPrHoEPp3v9ipXntpqVU3ASRgpI1hUp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import seaborn as sns

df = pd.read_csv('/content/customer_segmentation.csv')
df

df.isnull().sum()

mean1 = df['Income'].mean()
df['Income'] = df['Income'].fillna(mean1)

df.isnull().sum()

#identifying categorical columns to remove because they do not influence the clustering

categ_columns = df.select_dtypes(include='object').columns
categ_columns

df = df.drop(columns='Education')

df = df.drop(columns='Marital_Status')

df = df.drop(columns='Dt_Customer')

scaling = StandardScaler()
scaled_data = scaling.fit_transform(df)

elbow=[]
silhouette_scores = []
k_values = range(2, 10)
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_data)
    elbow.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

plt.plot(k_values, elbow, marker='o', linestyle='--')
plt.show()

opt_k = 7 #from the elbow graph
kmeans = KMeans(n_clusters=opt_k, random_state=42)

kmeans.fit(scaled_data)

y_pred = kmeans.predict(scaled_data)
y_pred

silhouette = silhouette_score(scaled_data, y_pred)

df['Cluster'] = kmeans.labels_

cluster_profiles = df.groupby('Cluster').mean()

for cluster in range(7):
    cluster_data = df[df['Cluster'] == cluster]
    plt.scatter(cluster_data['NumWebVisitsMonth'], cluster_data['Income'], label=f'Cluster {cluster}')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='black', marker='*', label='Centroids')
plt.show()

for cluster in range(7):
    cluster_data = df[df['Cluster'] == cluster]
    plt.scatter(cluster_data['ID'], cluster_data['Income'], label=f'Cluster {cluster}')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='black', marker='*', label='Centroids')
plt.show()

for cluster in range(7):
    cluster_data = df[df['Cluster'] == cluster]
    plt.scatter(cluster_data['Recency'], cluster_data['sNumWebVisitsMonth'], label=f'Cluster {cluster}')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='black', marker='*', label='Centroids')
plt.show()